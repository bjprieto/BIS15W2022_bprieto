box(
selectInput("group", "Select Taxonomic Group", choices = levels(as.factor(gabon_long$taxonomic_group)), selected = "apes")
),
box(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = gabon_long, aes_string(x = "distance", y = "ra"))+
geom_point()+
geom_smooth(method = "lm", se = T)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
box(
selectInput("group", "Select Taxonomic Group", choices = levels(as.factor(gabon_long$taxonomic_group)), selected = "apes")
),
box(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = gabon_long %>%
filter(taxonomic_group == input$group),
aes_string(x = "distance", y = "ra"))+
geom_point()+
geom_smooth(method = "lm", se = T)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
box(
selectInput("group", "Select Taxonomic Group", choices = levels(as.factor(gabon_long$taxonomic_group)), selected = "apes")
),
box(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = gabon_long %>%
filter(taxonomic_group == input$group),
aes_string(x = "distance", y = "ra"))+
geom_point()+
geom_smooth(method = "lm", se = T)+
labs(x = "Distance to nearest village (km",
y = "Relative abundance (%)")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
box(
selectInput("group", "Select Taxonomic Group", choices = levels(as.factor(gabon_long$taxonomic_group)), selected = "apes")
),
box(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = gabon_long %>%
filter(taxonomic_group == input$group),
aes_string(x = "distance", y = "ra"))+
geom_point(base_size = 16)+
geom_smooth(method = "lm", se = T)+
labs(x = "Distance to nearest village (km",
y = "Relative abundance (%)")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
box(
selectInput("group", "Select Taxonomic Group", choices = levels(as.factor(gabon_long$taxonomic_group)), selected = "apes")
),
box(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = gabon_long %>%
filter(taxonomic_group == input$group),
aes_string(x = "distance", y = "ra"))+
geom_point(base_size = 18)+
geom_smooth(method = "lm", se = T)+
labs(x = "Distance to nearest village (km",
y = "Relative abundance (%)")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
box(
selectInput("group", "Select Taxonomic Group", choices = levels(as.factor(gabon_long$taxonomic_group)), selected = "apes")
),
box(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = gabon_long %>%
filter(taxonomic_group == input$group),
aes_string(x = "distance", y = "ra"))+
geom_point(base_size = 20)+
geom_smooth(method = "lm", se = T)+
labs(x = "Distance to nearest village (km",
y = "Relative abundance (%)")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
box(
selectInput("group", "Select Taxonomic Group", choices = levels(as.factor(gabon_long$taxonomic_group)), selected = "apes")
),
box(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = gabon_long %>%
filter(taxonomic_group == input$group),
aes_string(x = "distance", y = "ra"))+
geom_point(size = 2)+
geom_smooth(method = "lm", se = T)+
labs(x = "Distance to nearest village (km",
y = "Relative abundance (%)")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
box(
selectInput("group", "Select Taxonomic Group", choices = levels(as.factor(gabon_long$taxonomic_group)), selected = "apes")
),
box(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = gabon_long %>%
filter(taxonomic_group == input$group),
aes_string(x = "distance", y = "ra"))+
geom_point(size = 5)+
geom_smooth(method = "lm", se = T)+
labs(x = "Distance to nearest village (km",
y = "Relative abundance (%)")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
box(
selectInput("group", "Select Taxonomic Group", choices = levels(as.factor(gabon_long$taxonomic_group)), selected = "apes")
),
box(
plotOutput("plot", height = "400px", width = "600px")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = gabon_long %>%
filter(taxonomic_group == input$group),
aes_string(x = "distance", y = "ra"))+
geom_point(size = 5)+
geom_smooth(method = "lm", se = T)+
labs(x = "Distance to nearest village (km",
y = "Relative abundance (%)")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
box(
selectInput("group", "Select Taxonomic Group", choices = levels(as.factor(gabon_long$taxonomic_group)), selected = "apes")
),
box(
plotOutput("plot", height = "200px", width = "300px")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = gabon_long %>%
filter(taxonomic_group == input$group),
aes_string(x = "distance", y = "ra"))+
geom_point(size = 5)+
geom_smooth(method = "lm", se = T)+
labs(x = "Distance to nearest village (km",
y = "Relative abundance (%)")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
box(
selectInput("group", "Select Taxonomic Group", choices = levels(as.factor(gabon_long$taxonomic_group)), selected = "apes")
),
box(
plotOutput("plot", height = "300px", width = "400px")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = gabon_long %>%
filter(taxonomic_group == input$group),
aes_string(x = "distance", y = "ra"))+
geom_point(size = 5)+
geom_smooth(method = "lm", se = T)+
labs(x = "Distance to nearest village (km",
y = "Relative abundance (%)")+
theme_minimal()
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
box(
selectInput("group", "Select Taxonomic Group", choices = levels(as.factor(gabon_long$taxonomic_group)), selected = "apes")
),
box(
plotOutput("plot", height = "300px", width = "400px")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = gabon_long %>%
filter(taxonomic_group == input$group),
aes_string(x = "distance", y = "ra"))+
geom_point(size = 5)+
geom_smooth(method = "lm", se = T)+
labs(x = "Distance to nearest village (km",
y = "Relative abundance (%)")+
theme_classic()
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
box(
selectInput("group", "Select Taxonomic Group", choices = levels(as.factor(gabon_long$taxonomic_group)), selected = "apes")
),
box(
plotOutput("plot", height = "300px", width = "400px")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = gabon_long %>%
filter(taxonomic_group == input$group),
aes_string(x = "distance", y = "ra"))+
geom_point(size = 4)+
geom_smooth(method = "lm", se = T)+
labs(x = "Distance to nearest village (km",
y = "Relative abundance (%)")+
theme_linedraw(base_size = 16)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
box(
selectInput("group", "Select Taxonomic Group", choices = levels(as.factor(gabon_long$taxonomic_group)), selected = "apes")
),
box(
plotOutput("plot", height = "300px", width = "400px")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = gabon_long %>%
filter(taxonomic_group == input$group),
aes_string(x = "distance", y = "ra"))+
geom_point(size = 4)+
geom_smooth(method = "lm", se = T)+
labs(x = "Distance to nearest village (km",
y = "Relative abundance (%)")+
theme_linedraw(base_size = 14)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
box(
selectInput("group", "Select Taxonomic Group", choices = levels(as.factor(gabon_long$taxonomic_group)), selected = "apes")
),
box(
plotOutput("plot", height = "300px", width = "400px")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = gabon_long %>%
filter(taxonomic_group == input$group),
aes_string(x = "distance", y = "ra"))+
geom_point(size = 4)+
geom_smooth(method = "lm", se = T)+
labs(x = "Distance to nearest village (km)",
y = "Relative abundance (%)")+
theme_linedraw(base_size = 14)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
view(read_csv("data/uc_data/Berkeley.csv"))
read_csv("data/uc_data/Berkeley.csv")
read_csv("data/uc_data/Berkeley.csv")
read_csv("data/uc_data/Irvine.csv")
irvine <- read_csv("data/uc_data/Irvine.csv")
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Admissions"),
dashboardSidebar(disable = T),
dashboardBody(box(
selectInput("year", "Select Academic Year",
choices = levels(as.factor(uc_admit$Academic_Yr)), selected = "2010"),
selectInput("campus", "Select Campus",
choices = levels(as.factor(uc_admit$Campus)), selected = "Berkeley"),
selectInput("admit_category", "Select Admit Category",
choices = levels(as.factor(uc_admit$Category)), selected = "Admits"),
title = "Plot Options"
),
box(plotOutput("plot"),
title = "UC Admissions by Ethnicity"
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = uc_admit %>%
filter(Academic_Yr == input$year,
Campus == input$campus,
Category == input$admit_category),
aes_string(x = "Ethnicity", y = "FilteredCountFR"))+
geom_col(fill = "navy")+
theme_linedraw(base_size = 14)+
labs(y = "Number Admitted")+
coord_flip()
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Enrollment"),
dashboardSidebar(disable = T),
dashboardBody(box(
selectInput("campus", "Select Campus",
choices = levels(as.factor(uc_admit$Campus)), selected = "Berkeley"),
selectInput("admit_category", "Select Admit Category",
choices = levels(as.factor(uc_admit$Category)), selected = "Admits"),
selectInput("ethnicity", "Select Ethnic Group",
choices = levels(as.factor(uc_admit$Ethnicity)), selected = "All"),
title = "Plot Options"
),
box(plotOutput("plot"),
title = "UC Enrollment Over Time"
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = uc_admit %>%
filter(Campus == input$campus,
Category == input$admit_category,
Ethnicity == input$ethnicity),
aes_string(x = "Academic_Yr", y = "FilteredCountFR"))+
geom_col(fill = "navy")+
theme_linedraw(base_size = 14)+
labs(x = "Academic Year",
y = "Number Enrolled")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
box(
selectInput("group", "Select Taxonomic Group", choices = levels(as.factor(gabon_long$taxonomic_group)), selected = "apes")
),
box(
plotOutput("plot", height = "300px", width = "400px")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = gabon_long %>%
filter(taxonomic_group == input$group),
aes_string(x = "distance", y = "ra"))+
geom_point(size = 4)+
geom_smooth(method = "lm", se = T)+
labs(x = "Distance to nearest village (km)",
y = "Relative abundance (%)")+
theme_linedraw(base_size = 14)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
?theme()
?theme()
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
box(
selectInput("group", "Select Taxonomic Group", choices = levels(as.factor(gabon_long$taxonomic_group)), selected = "apes")
),
box(
plotOutput("plot", height = "300px", width = "400px")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = gabon_long %>%
filter(taxonomic_group == input$group),
aes_string(x = "distance", y = "ra"))+
geom_point(size = 4)+
geom_smooth(method = "lm", se = T)+
labs(x = "Distance to nearest village (km)",
y = "Relative abundance (%)")+
theme_linedraw(base_size = 14)+
theme(panel.grid = NULL)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
